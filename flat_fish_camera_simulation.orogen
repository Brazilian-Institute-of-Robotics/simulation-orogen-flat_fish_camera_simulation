name "flat_fish_camera_simulation"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "vizkit3d_laser_line-viz"
using_task_library "underwater_camera_simulation"

import_types_from "flat_fish_camera_simulationTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "flat_fish_camera_simulation"
# import_types_from "flat_fish_camera_simulation/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the flat_fish_camera_simulation namespace.
task_context "Task" do
    subclasses "underwater_camera_simulation::Task"
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # Reas laser scan data to project a laser line
    input_port "laser_line_samples", "/base/samples/LaserScan"

    # By default, the task will be periodic with a period of 0.1
    periodic 0.1
end

